name: Publish to PyPI

on:
  release:
    types: [published]
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      environment:
        description: "Choose target environment"
        required: true
        default: "testpypi"
        type: choice
        options:
          - testpypi
          - pypi

jobs:
  build:
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/project/dialogue-guardian/
    steps:
      - uses: actions/checkout@v5

      - name: Debug workflow trigger
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "Repository: ${{ github.repository }}"
          echo "Manual environment choice: ${{ github.event.inputs.environment || 'not manual' }}"

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.11"

      - name: Cache build dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-publish-build-${{ hashFiles('dialogue-guardian/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-publish-build-

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: |
          cd dialogue-guardian
          python -m build

      - name: Check package
        run: |
          cd dialogue-guardian
          twine check dist/*

      - name: Upload to Test PyPI
        if: |
          (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')) ||
          (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'testpypi')
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
        run: |
          cd dialogue-guardian
          echo "Publishing to Test PyPI..."
          if [ -z "${{ secrets.TEST_PYPI_API_TOKEN }}" ]; then
            echo "WARNING: TEST_PYPI_API_TOKEN secret is not set!"
            echo "Skipping Test PyPI upload."
            exit 0
          fi
          twine upload --repository testpypi dist/*
        continue-on-error: true

      - name: Upload to PyPI
        if: |
          (github.event_name == 'release') ||
          (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'pypi')
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          cd dialogue-guardian
          echo "Publishing to PyPI..."
          echo "Event: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          if [ -z "${{ secrets.PYPI_API_TOKEN }}" ]; then
            echo "ERROR: PYPI_API_TOKEN secret is not set!"
            echo "Please add your PyPI API token as a repository secret."
            exit 1
          fi
          twine upload dist/*

  test-install:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'release' || (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v'))
    strategy:
      matrix:
        # Reduced matrix - only test critical combinations for publish validation
        python-version: ["3.8", "3.12"]

    steps:
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip for test installation
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-test-install-${{ matrix.python-version }}
          restore-keys: |
            ${{ runner.os }}-test-install-

      # Only install FFmpeg on Ubuntu for basic smoke testing
      - name: Install FFmpeg
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      - name: Test installation from PyPI
        if: github.event_name == 'release'
        run: |
          # Add delay to allow PyPI propagation
          sleep 60
          pip install dialogue-guardian
          guardian --help
          python -c "import guardian; print(f'Guardian version: {guardian.__version__}')"

      - name: Test installation from Test PyPI
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
        run: |
          # Add delay to allow Test PyPI propagation
          sleep 30
          pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ dialogue-guardian
          guardian --help
          python -c "import guardian; print(f'Guardian version: {guardian.__version__}')"

  # Post-publish validation
  validate-release:
    needs: [build, test-install]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    steps:
      - name: Validate PyPI package
        run: |
          pip install dialogue-guardian
          python -c "import guardian; print(f'Successfully installed Guardian {guardian.__version__} from PyPI')"
          echo "âœ… Package validation successful!"
