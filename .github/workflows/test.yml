name: Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    - cron: "0 6 * * 1" # Weekly on Monday at 6 AM UTC

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]

    env:
      PYTHONPATH: dialogue-guardian/src

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Get pip cache directory
        id: pip-cache
        run: |
          echo "PIP_CACHE_DIR=$(pip cache dir)" >> $GITHUB_OUTPUT

      - name: Cache pip dependencies
        uses: actions/cache@v4
        if: runner.os != 'Windows'
        with:
          path: ${{ steps.pip-cache.outputs.PIP_CACHE_DIR }}
          key: ${{ runner.os }}-pip-${{ hashFiles('dialogue-guardian/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Cache pip dependencies (Windows)
        uses: actions/cache@v4
        if: runner.os == 'Windows'
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ hashFiles('dialogue-guardian/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Print cache key (Windows)
        if: runner.os == 'Windows'
        run: |
          echo "Cache key: ${{ runner.os }}-pip-${{ hashFiles('dialogue-guardian/pyproject.toml') }}"

      - name: Install FFmpeg (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      - name: Install FFmpeg (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install ffmpeg

      - name: Install FFmpeg (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install ffmpeg

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          cd dialogue-guardian
          echo "=== Installing requirements ==="
          pip install -r test_requirements.txt
          echo "=== Installing package ==="
          pip install -e . -v
          echo "=== Checking installation ==="
          pip show dialogue-guardian || echo "Package not found"
          echo "=== Testing import ==="
          python -c "import sys; sys.path.insert(0, 'src'); import guardian; print('Guardian imported successfully')" || echo "Failed to import guardian"

      - name: Run unit tests
        run: |
          cd dialogue-guardian
          echo "=== Testing direct import ==="
          python -c "import sys; sys.path.insert(0, 'src'); import guardian; print('Guardian found:', guardian.__version__)"
          echo "=== Running tests ==="
          cd src
          python -m pytest ../tests/ -v --tb=short

      - name: Test CLI functionality
        run: |
          cd dialogue-guardian/src
          python -m guardian --help || echo "CLI test failed"
          cd ..
          dialogue-guardian --help || echo "Entry point test failed"

  coverage:
    runs-on: ubuntu-latest
    env:
      PYTHONPATH: dialogue-guardian/src
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install FFmpeg
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          cd dialogue-guardian
          echo "=== Installing requirements ==="
          pip install -r test_requirements.txt
          echo "=== Installing package ==="
          pip install -e . -v

      - name: Run tests with coverage
        run: |
          cd dialogue-guardian
          echo "=== Running coverage from src directory ==="
          cd src && python -m pytest ../tests/ --cov=guardian --cov-report=xml --cov-report=html --cov-report=term

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./dialogue-guardian/src/coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}
