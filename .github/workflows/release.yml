name: Create Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: "Version bump type"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major
      prerelease:
        description: "Is this a prerelease?"
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  pull-requests: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          persist-credentials: true

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.11"

      - name: Cache release dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-release-${{ hashFiles('dialogue-guardian/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-release-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bump2version build

      - name: Bump version
        id: bump
        working-directory: dialogue-guardian
        run: |
          # Verify .bumpversion.cfg exists
          if [ ! -f .bumpversion.cfg ]; then
            echo "Error: .bumpversion.cfg not found!"
            exit 1
          fi

          # Check what version we would bump to
          NEXT_VERSION=$(bump2version --dry-run --list ${{ github.event.inputs.version_type }} | grep new_version= | cut -d= -f2)
          echo "Next version would be: $NEXT_VERSION"

          # Delete existing tag if it exists (locally and remotely)
          if git tag -l "v$NEXT_VERSION" | grep -q "v$NEXT_VERSION"; then
            echo "Tag v$NEXT_VERSION already exists, deleting it..."
            git tag -d "v$NEXT_VERSION" || true
            git push origin ":refs/tags/v$NEXT_VERSION" || true
          fi

          # Configure git for commits
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Now bump version (this will commit and tag)
          bump2version ${{ github.event.inputs.version_type }}
          
          # Get the new version that was just set
          NEW_VERSION=$(grep "current_version" .bumpversion.cfg | cut -d' ' -f3)
          
          # Manually update docs/conf.py using a Python script
          python scripts/update_conf_py.py "$NEW_VERSION"
          
          # Commit the additional docs changes
          git add docs/conf.py
          git commit --amend --no-edit

          # Push the version bump commit
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          git push origin main

      - name: Get new version
        id: get_version
        working-directory: dialogue-guardian
        run: |
          # Extract version using Python to avoid shell parsing issues
          NEW_VERSION=$(python -c "
          import configparser
          config = configparser.ConfigParser()
          config.read('.bumpversion.cfg')
          print(config['bumpversion']['current_version'])
          ")
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Build package
        working-directory: dialogue-guardian
        run: |
          python -m build

      - name: Generate changelog
        working-directory: dialogue-guardian
        run: |
          # Get current date
          CURRENT_DATE=$(date +%Y-%m-%d)
          
          # Generate changelog entry for GitHub release
          echo "## Version $NEW_VERSION" > CHANGELOG_ENTRY.md
          echo "" >> CHANGELOG_ENTRY.md
          echo "### Changes" >> CHANGELOG_ENTRY.md
          # Get commits since last tag, or all commits if no previous tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            git log --oneline --pretty=format:"- %s" ${LAST_TAG}..HEAD >> CHANGELOG_ENTRY.md
          else
            echo "- Initial release with version $NEW_VERSION" >> CHANGELOG_ENTRY.md
          fi
          
          # Update the actual CHANGELOG.md file
          # Create a temporary file with the new entry
          echo "# Changelog" > CHANGELOG_NEW.md
          echo "" >> CHANGELOG_NEW.md
          echo "All notable changes to this project will be documented in this file." >> CHANGELOG_NEW.md
          echo "" >> CHANGELOG_NEW.md
          echo "The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/)," >> CHANGELOG_NEW.md
          echo "and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html)." >> CHANGELOG_NEW.md
          echo "" >> CHANGELOG_NEW.md
          echo "## [$NEW_VERSION] - $CURRENT_DATE" >> CHANGELOG_NEW.md
          echo "" >> CHANGELOG_NEW.md
          echo "### Changes" >> CHANGELOG_NEW.md
          # Get commits since last tag, or all commits if no previous tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            git log --oneline --pretty=format:"- %s" ${LAST_TAG}..HEAD >> CHANGELOG_NEW.md
          else
            echo "- Initial release with version $NEW_VERSION" >> CHANGELOG_NEW.md
          fi
          echo "" >> CHANGELOG_NEW.md
          
          # Append existing changelog content (skip the header)
          if [ -f CHANGELOG.md ]; then
            # Skip the first 7 lines (header) and append the rest
            tail -n +8 CHANGELOG.md >> CHANGELOG_NEW.md
          fi
          
          # Replace the old changelog with the new one
          mv CHANGELOG_NEW.md CHANGELOG.md
          
          # Update the docs changelog.rst file as well
          echo "Changelog" > docs/changelog_new.rst
          echo "=========" >> docs/changelog_new.rst
          echo "" >> docs/changelog_new.rst
          echo "For the complete changelog, see the \`CHANGELOG.md <https://github.com/tsnearly/dialogue-guardian/blob/main/dialogue-guardian/CHANGELOG.md>\`_ file in the repository." >> docs/changelog_new.rst
          echo "" >> docs/changelog_new.rst
          echo "Recent Changes" >> docs/changelog_new.rst
          echo "--------------" >> docs/changelog_new.rst
          echo "" >> docs/changelog_new.rst
          echo "Version $NEW_VERSION ($CURRENT_DATE)" >> docs/changelog_new.rst
          echo "$(printf '~%.0s' $(seq 1 $((${#NEW_VERSION} + ${#CURRENT_DATE} + 11))))" >> docs/changelog_new.rst
          echo "" >> docs/changelog_new.rst
          echo "**Changes:**" >> docs/changelog_new.rst
          echo "" >> docs/changelog_new.rst
          # Get commits since last tag, or all commits if no previous tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            git log --oneline --pretty=format:"- %s" ${LAST_TAG}..HEAD >> docs/changelog_new.rst
          else
            echo "- Initial release with version $NEW_VERSION" >> docs/changelog_new.rst
          fi
          echo "" >> docs/changelog_new.rst
          echo "" >> docs/changelog_new.rst
          
          # Append existing changelog content (skip the recent changes section)
          if [ -f docs/changelog.rst ]; then
            # Find the line number where "Version 1.1.0" starts and append from there
            LINE_NUM=$(grep -n "Version 1\.1\.0" docs/changelog.rst | head -1 | cut -d: -f1)
            if [ ! -z "$LINE_NUM" ]; then
              tail -n +$LINE_NUM docs/changelog.rst >> docs/changelog_new.rst
            fi
          fi
          
          # Replace the old changelog with the new one
          mv docs/changelog_new.rst docs/changelog.rst
          
          # Commit the changelog updates
          git add CHANGELOG.md docs/changelog.rst
          git commit -m "Update CHANGELOG.md and docs/changelog.rst for version $NEW_VERSION" || echo "No changelog changes to commit"

      - name: Push changelog and tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git
          # Push the changelog commit first
          git push origin main || echo "No changelog commit to push"
          # Then push the tag to trigger publish workflow
          git push origin v${{ env.NEW_VERSION }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.NEW_VERSION }}
          name: Release v${{ env.NEW_VERSION }}
          body_path: dialogue-guardian/CHANGELOG_ENTRY.md
          draft: false
          prerelease: ${{ github.event.inputs.prerelease }}
          files: dialogue-guardian/dist/*
          generate_release_notes: true

      - name: Wait for PyPI Publish
        run: |
          echo "‚úÖ Release created successfully!"
          echo "üì¶ The PyPI publish workflow should be triggered automatically by:"
          echo "   1. Tag push: v${{ env.NEW_VERSION }}"
          echo "   2. GitHub release creation"
          echo ""
          echo "üîç Check the Actions tab to see the 'Publish to PyPI' workflow running."
          echo "üöÄ Your package will be available on PyPI shortly!"
