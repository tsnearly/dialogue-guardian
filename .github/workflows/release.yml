name: Create Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major
      prerelease:
        description: 'Is this a prerelease?'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  pull-requests: write

jobs:
  release:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
        persist-credentials: true
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bump2version build
    

    
    - name: Bump version
      id: bump
      working-directory: dialogue-guardian
      run: |
        # Create .bumpversion.cfg if it doesn't exist
        if [ ! -f .bumpversion.cfg ]; then
          cat > .bumpversion.cfg << 'EOF'
        [bumpversion]
        current_version = 1.1.0
        commit = True
        tag = True
        tag_name = v{new_version}
        
        [bumpversion:file:setup.py]
        search = version="{current_version}"
        replace = version="{new_version}"
        
        [bumpversion:file:pyproject.toml]
        search = version = "{current_version}"
        replace = version = "{new_version}"
        
        [bumpversion:file:src/guardian/__init__.py]
        search = __version__ = "{current_version}"
        replace = __version__ = "{new_version}"
        EOF
        fi
        
        # Check what version we would bump to
        NEXT_VERSION=$(bump2version --dry-run --list ${{ github.event.inputs.version_type }} | grep new_version= | cut -d= -f2)
        echo "Next version would be: $NEXT_VERSION"
        
        # Delete existing tag if it exists (locally and remotely)
        if git tag -l "v$NEXT_VERSION" | grep -q "v$NEXT_VERSION"; then
          echo "Tag v$NEXT_VERSION already exists, deleting it..."
          git tag -d "v$NEXT_VERSION" || true
          git push origin ":refs/tags/v$NEXT_VERSION" || true
        fi
        
        # Configure git for commits
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Now bump version (this will commit and tag)
        bump2version ${{ github.event.inputs.version_type }}
        
        # Push the version bump commit
        git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
        git push origin main
    
    - name: Get new version
      id: get_version
      working-directory: dialogue-guardian
      run: |
        # Extract version using Python to avoid shell parsing issues
        NEW_VERSION=$(python -c "
        import configparser
        config = configparser.ConfigParser()
        config.read('.bumpversion.cfg')
        print(config['bumpversion']['current_version'])
        ")
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
    
    - name: Build package
      working-directory: dialogue-guardian
      run: |
        python -m build
    
    - name: Generate changelog
      working-directory: dialogue-guardian
      run: |
        # Simple changelog generation
        echo "## Version $NEW_VERSION" > CHANGELOG_ENTRY.md
        echo "" >> CHANGELOG_ENTRY.md
        echo "### Changes" >> CHANGELOG_ENTRY.md
        git log --oneline --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> CHANGELOG_ENTRY.md || echo "- Initial release" >> CHANGELOG_ENTRY.md
    
    - name: Push tag (to trigger publish workflow)
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git
        git push origin v${{ env.NEW_VERSION }}
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ env.NEW_VERSION }}
        name: Release v${{ env.NEW_VERSION }}
        body_path: dialogue-guardian/CHANGELOG_ENTRY.md
        draft: false
        prerelease: ${{ github.event.inputs.prerelease }}
        files: dialogue-guardian/dist/*
        generate_release_notes: true
    
    - name: Wait for PyPI Publish
      run: |
        echo "‚úÖ Release created successfully!"
        echo "üì¶ The PyPI publish workflow should be triggered automatically by:"
        echo "   1. Tag push: v${{ env.NEW_VERSION }}"
        echo "   2. GitHub release creation"
        echo ""
        echo "üîç Check the Actions tab to see the 'Publish to PyPI' workflow running."
        echo "üöÄ Your package will be available on PyPI shortly!"