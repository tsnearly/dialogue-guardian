# SPDX-FileCopyrightText: 2025 Tony Snearly
# SPDX-License-Identifier: OSL-3.0
name: Create Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: "Version bump type"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major
      prerelease:
        description: "Is this a prerelease?"
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  pull-requests: write

jobs:
  setup:
    runs-on: ubuntu-latest
    environment:
      name: pypi
    steps:
      - name: Configure for PyPI
        shell: bash
        run: |
          if [ "${{ github.event.inputs.prerelease }}" == "false" ]; then
            echo "Configuring for PyPI"
          fi
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}

  setup-testpypi:
    runs-on: ubuntu-latest
    environment:
      name: testpypi
    steps:
      - name: Configure for TestPyPI
        shell: bash
        run: |
          if [ "${{ github.event.inputs.prerelease }}" == "true" ]; then
            echo "Configuring for TestPyPI"
          fi
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}

  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          persist-credentials: true

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.11"

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-release-${{ hashFiles('**/pyproject.toml', '**/requirements*.txt', '**/setup.py') }}-bump2version-build-twine
          restore-keys: |
            ${{ runner.os }}-pip-release-
            ${{ runner.os }}-pip-

      - name: Install release dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bump2version build twine

      - name: Configure git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Bump version and create release
        id: bump
        working-directory: dialogue-guardian
        run: |
          # Configure git remote for pushing
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git

          # Get current version for logging
          CURRENT_VERSION=$(python -c "
          import configparser
          config = configparser.ConfigParser()
          config.read('.bumpversion.cfg')
          print(config['bumpversion']['current_version'])
          ")
          echo "Current version: $CURRENT_VERSION"

          # Preview what the new version will be
          NEXT_VERSION=$(bump2version --dry-run --list ${{ github.event.inputs.version_type }} | grep new_version= | cut -d= -f2)
          echo "Next version will be: $NEXT_VERSION"

          # Clean up any existing tag (in case of re-runs)
          if git tag -l "v$NEXT_VERSION" | grep -q "v$NEXT_VERSION"; then
            echo "Removing existing tag v$NEXT_VERSION..."
            git tag -d "v$NEXT_VERSION" || true
            git push origin ":refs/tags/v$NEXT_VERSION" || true
          fi

          # Let bump2version handle all file updates, commits, and tagging
          bump2version ${{ github.event.inputs.version_type }}

          # Get the final version and export it
          NEW_VERSION=$(python -c "
          import configparser
          config = configparser.ConfigParser()
          config.read('.bumpversion.cfg')
          print(config['bumpversion']['current_version'])
          ")

          echo "Successfully bumped to version: $NEW_VERSION"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

          # Push the changes and tags
          git push origin main
          git push origin "v$NEW_VERSION"

      - name: Build package
        working-directory: dialogue-guardian
        run: |
          python -m build

      - name: Generate release notes
        working-directory: dialogue-guardian
        run: |
          # Generate changelog entry for GitHub release
          echo "## Version $NEW_VERSION" > CHANGELOG_ENTRY.md
          echo "" >> CHANGELOG_ENTRY.md
          echo "### Changes" >> CHANGELOG_ENTRY.md

          # Get commits since last tag for release notes
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            echo "Changes since $LAST_TAG:" >> CHANGELOG_ENTRY.md
            git log --oneline --pretty=format:"- %s" ${LAST_TAG}..HEAD~1 >> CHANGELOG_ENTRY.md
          else
            echo "- Initial release with version $NEW_VERSION" >> CHANGELOG_ENTRY.md
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.bump.outputs.version }}
          name: Release v${{ steps.bump.outputs.version }}
          body_path: dialogue-guardian/CHANGELOG_ENTRY.md
          draft: false
          prerelease: ${{ github.event.inputs.prerelease }}
          files: dialogue-guardian/dist/*.tar.gz
          generate_release_notes: true

      - name: Publish release to PyPI (using twine)
        working-directory: dialogue-guardian
        run: |
          twine upload dist/*
