# SPDX-FileCopyrightText: 2025 Tony Snearly
# SPDX-License-Identifier: OSL-3.0
name: CI

# This workflow runs the continuous integration tests and basic quality checks
on:
  push:
    branches: [main, develop]
    paths:
      - "dialogue-guardian/src/**"
      - "dialogue-guardian/tests/**"
      - "dialogue-guardian/pyproject.toml"
      - "dialogue-guardian/requirements.txt"
      - ".github/workflows/ci.yml"
      - ".gitignore"
  pull_request:
    branches: [main]
    paths:
      - "dialogue-guardian/src/**"
      - "dialogue-guardian/tests/**"
      - "dialogue-guardian/pyproject.toml"
      - "dialogue-guardian/requirements.txt"
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"

jobs:
  # Run tests on multiple Python versions and OS
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
      - uses: actions/checkout@v5

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ${{ runner.os == 'Linux' && '~/.cache/pip' || runner.os == 'macOS' && '~/Library/Caches/pip' || '~/AppData/Local/pip/Cache' }}
          key: ${{ runner.os }}-pip-cache
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Cache Homebrew (macOS)
        if: matrix.os == 'macos-latest'
        uses: actions/cache@v4
        with:
          path: ~/Library/Caches/Homebrew
          key: ${{ runner.os }}-homebrew-cache
          restore-keys: |
            ${{ runner.os }}-homebrew-

      - name: Install FFmpeg (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        uses: FedericoCarboni/setup-ffmpeg@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install FFmpeg (macOS)
        if: matrix.os == 'macos-latest'
        run: brew install ffmpeg

      - name: Install FFmpeg (Windows)
        if: matrix.os == 'windows-latest'
        uses: FedericoCarboni/setup-ffmpeg@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify FFmpeg installation
        run: |
          ffmpeg -version
          ffprobe -version

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          cd dialogue-guardian
          pip install -e .
          pip install pytest pytest-cov

      - name: Run tests with pytest
        run: |
          cd dialogue-guardian
          pytest tests/ -v --cov=src/guardian --cov-report=xml --cov-report=html

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        with:
          file: ./dialogue-guardian/coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report-${{ matrix.os }}-${{ matrix.python-version }}
          path: dialogue-guardian/htmlcov/
          retention-days: 30

  # Linting and code style checks
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ${{ runner.os == 'Linux' && '~/.cache/pip' || runner.os == 'macOS' && '~/Library/Caches/pip' || '~/AppData/Local/pip/Cache' }}
          key: ${{ runner.os }}-lint-cache
          restore-keys: |
            ${{ runner.os }}-lint-

      - name: Install FFmpeg
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      - name: Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install pylint black isort flake8 mypy
          cd dialogue-guardian
          pip install -e .

      - name: Check code formatting with black
        run: |
          cd dialogue-guardian
          black --check src/guardian/ tests/ || echo "Code formatting issues found"

      - name: Check import ordering with isort
        run: |
          cd dialogue-guardian
          isort --check-only src/guardian/ tests/ || echo "Import ordering issues found"

      - name: Run pylint
        run: |
          cd dialogue-guardian
          pylint src/guardian/ --disable=C0111,C0103,W0212,R0913,R0914 || echo "Pylint issues found"

      - name: Run flake8
        run: |
          cd dialogue-guardian
          flake8 src/guardian/ tests/ --max-line-length=100 --ignore=E501,W503 || echo "Flake8 issues found"

      - name: Run type checking with mypy
        run: |
          cd dialogue-guardian
          mypy src/guardian/ --ignore-missing-imports || echo "Type checking issues found"

  # Build and verify package
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install FFmpeg
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build wheel setuptools

      - name: Build package
        run: |
          cd dialogue-guardian
          python -m build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: built-package
          path: dialogue-guardian/dist/
          retention-days: 30

      - name: Verify package integrity
        run: |
          cd dialogue-guardian
          pip install dist/*.whl
          python -c "import guardian; print(f'Guardian {guardian.__version__} installed successfully')"
